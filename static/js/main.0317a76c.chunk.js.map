{"version":3,"sources":["components/Editor.js","hooks/useLocalStorage.js","components/App.js","index.js"],"names":["Editor","props","language","displayTitle","value","onchange","useState","open","setOpen","className","type","onClick","prevopen","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","lineNumber","theme","useLocalStorage","key","initialValue","preFixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","javascript","setJavascript","css","setCss","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAWe,SAASA,EAAOC,GAC7B,IAAQC,EAA4CD,EAA5CC,SAAUC,EAAkCF,EAAlCE,aAAcC,EAAoBH,EAApBG,MAAOC,EAAaJ,EAAbI,SAEvC,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,OACE,sBAAKC,UAAS,2BAAsBF,EAAO,GAAK,aAAhD,UACE,sBAAKE,UAAU,eAAf,UACGN,EACD,wBAAQO,KAAK,SAASD,UAAU,sBAAsBE,QAAS,kBAAMH,GAAQ,SAACI,GAAD,OAAeA,MAA5F,SACA,cAAC,IAAD,CAAiBC,KAAMN,EAAKO,IAAcC,WAG5C,cAAC,aAAD,CACEC,eAXe,SAACC,EAAQC,EAAMd,GAAf,OAAyBC,EAASD,IAYjDA,MAAOA,EACPK,UAAU,sBACVU,QAAS,CACPC,cAAc,EACdC,MAAM,EACNC,KAAMpB,EACNqB,YAAY,EACZC,MAAO,iBC7BF,SAASC,EAAgBC,EAAKC,GAC3C,IAAMC,EAFO,iBAEgBF,EAC7B,EAA0BpB,oBAAS,WACjC,IAAMuB,EAAYC,aAAaC,QAAQH,GACvC,OAAiB,MAAbC,EACKG,KAAKC,MAAMJ,GAEQ,oBAAjBF,EACFA,IAEAA,KARX,mBAAOvB,EAAP,KAAc8B,EAAd,KAcA,OAHAC,qBAAU,WACRL,aAAaM,QAAQR,EAAaI,KAAKK,UAAUjC,MAChD,CAACwB,EAAaxB,IACV,CAACA,EAAO8B,GCuCFI,MAtDf,WACE,MAAwBb,EAAgB,OAAQ,IAAhD,mBAAOc,EAAP,KAAaC,EAAb,KACA,EAAoCf,EAAgB,aAAc,IAAlE,mBAAOgB,EAAP,KAAmBC,EAAnB,KACA,EAAsBjB,EAAgB,MAAO,IAA7C,mBAAOkB,EAAP,KAAYC,EAAZ,KACA,EAA4BtC,mBAAS,IAArC,mBAAOuC,EAAP,KAAeC,EAAf,KAcA,OAZAX,qBAAU,WACR,IAAMY,EAAUC,YAAW,WACzBF,EAAU,6BAAD,OAEJP,EAFI,8BAGHI,EAHG,gCAIFF,EAJE,6BAMR,KACH,OAAO,kBAAMQ,aAAaF,MACzB,CAACR,EAAMI,EAAKF,IAGb,qCACE,sBAAKhC,UAAU,iBAAf,UACE,cAACT,EAAD,CACEE,SAAS,MACTC,aAAa,OACbC,MAAOmC,EACPlC,SAAUmC,IAEZ,cAACxC,EAAD,CACEE,SAAS,MACTC,aAAa,MACbC,MAAOuC,EACPtC,SAAUuC,IAEZ,cAAC5C,EAAD,CACEE,SAAS,aACTC,aAAa,aACbC,MAAOqC,EACPpC,SAAUqC,OAGd,qBAAKjC,UAAU,OAAf,SACE,wBACEoC,OAAQA,EACRK,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,eC7CjBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.0317a76c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/material.css\";\r\nimport \"codemirror/mode/xml/xml\";\r\nimport \"codemirror/mode/javascript/javascript\";\r\nimport \"codemirror/mode/css/css\";\r\nimport { Controlled as ControlledEditor } from \"react-codemirror2\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCompressAlt, faExpandAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function Editor(props) {\r\n  const { language, displayTitle, value, onchange } = props;\r\n  const handleChange = (editor, data, value) => onchange(value);\r\n  const [open, setOpen] = useState(true);\r\n  return (\r\n    <div className={`editor-container ${open ? \"\" : \"collapsed\"}`}>\r\n      <div className=\"editor-title\">\r\n        {displayTitle}\r\n        <button type=\"button\" className=\"expand-collapse-btn\" onClick={() => setOpen((prevopen) => !prevopen)}>\r\n        <FontAwesomeIcon icon={open?faCompressAlt:faExpandAlt}/>\r\n        </button>\r\n      </div>\r\n      <ControlledEditor\r\n        onBeforeChange={handleChange}\r\n        value={value}\r\n        className=\"code-mirror-wrapper\"\r\n        options={{\r\n          lineWrapping: true,\r\n          lint: true,\r\n          mode: language,\r\n          lineNumber: true,\r\n          theme: \"material\",\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst preFix = \"codepen-clone-\";\r\nexport default function useLocalStorage(key, initialValue) {\r\n  const preFixedKey = preFix + key;\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(preFixedKey);\r\n    if (jsonValue != null) {\r\n      return JSON.parse(jsonValue);\r\n    }\r\n    if (typeof initialValue === \"function\") {\r\n      return initialValue();\r\n    } else {\r\n      return initialValue;\r\n    }\r\n  });\r\n  useEffect(() => {\r\n    localStorage.setItem(preFixedKey, JSON.stringify(value));\r\n  }, [preFixedKey, value]);\r\n  return [value, setValue];\r\n}\r\n","import Editor from \"./Editor\";\nimport { useState, useEffect } from \"react\";\n import useLocalStorage from \"../hooks/useLocalStorage\";\n\nfunction App() {\n  const [html, setHtml] = useLocalStorage(\"html\", \"\");\n  const [javascript, setJavascript] = useLocalStorage(\"javascript\", \"\");\n  const [css, setCss] = useLocalStorage(\"css\", \"\");\n  const [srcDoc, setSrcDoc] = useState(\"\");\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setSrcDoc(`\n       <html>\n   <body>${html}</body>\n   <style>${css}</style>\n   <script>${javascript}</script>\n   </html>`);\n    }, 300);\n    return () => clearTimeout(timeout);\n  }, [html, css, javascript]);\n\n  return (\n    <>\n      <div className=\"pane top-pane \">\n        <Editor\n          language=\"xml\"\n          displayTitle=\"HTML\"\n          value={html}\n          onchange={setHtml}\n        />\n        <Editor\n          language=\"css\"\n          displayTitle=\"CSS\"\n          value={css}\n          onchange={setCss}\n        />\n        <Editor\n          language=\"javascript\"\n          displayTitle=\"JavaScript\"\n          value={javascript}\n          onchange={setJavascript}\n        />\n      </div>\n      <div className=\"pane\">\n        <iframe\n          srcDoc={srcDoc}\n          title=\"output\"\n          sandbox=\"allow-scripts\"\n          frameBorder=\"0\"\n          width=\"100%\"\n          height=\"100%\"\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n \n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n \n"],"sourceRoot":""}